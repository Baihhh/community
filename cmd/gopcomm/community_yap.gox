import (
	"context"
	"time"
	"log"
	"os"
	"io"
	"net/http"

	"github.com/goplus/community/internal/core"
	"github.com/goplus/community/markdown"
	"github.com/goplus/community/translation"
	language "golang.org/x/text/language"
)

var (
	community *core.Community
	trans *translation.Engine
)

todo := context.TODO()

get "/p/:id", ctx => {
	id := ctx.param("id")
	article, _ := community.article(todo, id)
	ctx.yap "article", {
		"ID":      id,
		"Title":   article.Title,
		"Content": article.Content,
	}
}
get "/add", ctx => {
	ctx.yap "add", {}
}

get "/", ctx => {
	articles, _, _ := community.listArticle(todo, core.MarkBegin, 20)
	ctx.yap "home", {
		"Items": articles,
	}
}
get "/edit", ctx => {
	uid := "3"
	id := ctx.param("id")
	doc := {
		"ID": id,
	}
	if id != "" {
		if editable, _ := community.canEditable(todo, uid, id); !editable {
			// TODO: can't edit this article
			log.Println("no permissions")
			return
		}
		article, _ := community.article(todo, id)
		doc["Title"] = article.Title
		doc["Content"] = article.Content
	}
	ctx.yap "edit", doc
}

get "/getTrans", ctx => {
	id := ctx.param("id")
	htmlUrl, _ := community.transHtmlUrl(todo, id)
	ctx.json {
		"data": htmlUrl,
	}
}

// click "submit" button
post "/commit", ctx => {
	// Whether article has been translated or not
	trans := ctx.param("trans")   // if trans != ""， add article 
	id := ctx.param("id")
	mdData := ctx.param("content")
	htmlData := ctx.param("html")
	// TODO get user id
	uid := "12"
	// add article 
	article := &core.Article{
		ArticleEntry: core.ArticleEntry{
			ID: id,
			Title: ctx.param("title"),
			UId:   uid,   
			Cover: ctx.param("cover"),
			Tags:  ctx.param("tags"),
		},
		Content: mdData,
		HtmlData:htmlData,
	}
	id, _ = community.putArticle(todo, uid, trans, article)
	article.ID = id
	ctx.yap "edit", *article
}

//  click "translate button"
post "/translate", ctx => {
	// TODO get user id
	uid := "1"
    mdData := ctx.param("content")
	htmlData := ctx.param("html")
	id, _ := community.saveHtml(todo, uid, htmlData, mdData)
	// get translation markdown
    transData, _ := trans.translateMarkdownText(mdData, language.Chinese, language.English)
	ctx.json {
		"id": id,  //article id
		"data": transData,  // translation markdown content
	}
}

get "/getMedia", ctx => {
	mediaId := ctx.param("id")
	// todo the err not empty return 404 for image
	fileKey, _ := community.GetMediaUrl(todo, mediaId)

	http.Redirect(ctx.ResponseWriter, ctx.Request, "qiniu demain"+fileKey, http.StatusTemporaryRedirect)
}

post "/upload", ctx => {
	file, header, err := ctx.FormFile("file")
	filename := header.Filename

	ctx.ParseMultipartForm(10 << 20)

	if err != nil {
		log.Fatalln("upload file error:", filename)
		ctx.JSON(500, err.Error())
		return
	}


	dst, err := os.Create(filename)
	if err != nil {
		log.Fatalln("create file error:", file)
		ctx.JSON(500, err.Error())
		return
	}
	defer func() {
		file.Close()
		dst.Close()
		err = os.Remove(filename)
		if err != nil {
		log.Fatalln("delete file error:", filename)
		return
		}
	}()


	_, err = io.Copy(dst, file)
	if err != nil {
		log.Fatalln("copy file errer:", filename)
		ctx.JSON(500, err.Error())
		return
	}
	bytes, err := os.ReadFile(filename)
	if err != nil {
		log.Fatalln("read file errer:", filename)
		ctx.JSON(500, err.Error())
		return
	}
	cookie, err := ctx.Request.Cookie("user_id")
	if err != nil {
		log.Fatalln("token不存在")
		ctx.JSON(500, err.Error())
		return
	}

	community.SaveMedia(context.Background(),cookie.Value,bytes)
}


conf := &core.Config{}
community, _ = core.New(todo, conf)
trans = translation.New(os.Getenv("NIUTRANS_API_KEY"), "", "")

println "start"
run ":8080"
